// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import frc.robot.subsystems.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    public static final int LEFT_X = 1;
    public static final int DOWN_A = 2;
    public static final int RIGHT_B = 3;
    public static final int UP_Y = 4;

    public static final int LEFT_BUMPER = 5;
    public static final int RIGHT_BUMPER = 6;
    public static final int LEFT_TRIGGER = 7;
    public static final int RIGHT_TRIGGER = 8;

    public static final int SELECT = 9;
    public static final int START = 10;
    public static final int LEFT_JOYSTICK = 11;
    public static final int RIGHT_JOYSTICK = 12;
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    public Joystick driver;
    public JoystickButton aButton;
    public JoystickButton bButton;
    public JoystickButton xButton;
    public JoystickButton yButton;
    public JoystickButton startButton;
    public JoystickButton leftBumper;

    public OI() {
        driver = new Joystick(0);

        xButton = new JoystickButton(driver, LEFT_X);
        aButton = new JoystickButton(driver, DOWN_A);
        bButton = new JoystickButton(driver, RIGHT_B);
        yButton = new JoystickButton(driver, UP_Y);
        startButton = new JoystickButton(driver, START);
        leftBumper = new JoystickButton(driver, LEFT_BUMPER);
        yButton.whenPressed(new DriveDistancePID(12));
        bButton.whenPressed(new TurnAnglePID(90));
        aButton.whenPressed(new DriveDistancePID(-12));
        xButton.whenPressed(new TurnAnglePID(-90));
        startButton.whenPressed(new DriveSquare(12));
        leftBumper.whenPressed(new TurnToTarget());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    }

    public Joystick getDriver() {
        return driver;
    }
}
