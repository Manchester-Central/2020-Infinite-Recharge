// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import com.chaos131.LogitechF310;

import edu.wpi.first.wpilibj2.command.RunCommand;
import frc.robot.commands.climbtake.SetClimbTakePosition;
import frc.robot.commands.climbtake.SetIntake;
import frc.robot.commands.drive.TankDrive;
import frc.robot.commands.serializer.SerializerStop;
import frc.robot.commands.turret.FlywheelZero;
import frc.robot.commands.turret.ManualTurret;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    public LogitechF310 driver;
    public LogitechF310 operator;

    public OI() {
        driver = new LogitechF310(0);
        operator = new LogitechF310(1);

        // Driver
        Robot.driveBase.setDefaultCommand(new TankDrive(1));
        Robot.climbTake.setDefaultCommand(new SetIntake(0));

        driver.rightBumper.whileHeld(new TankDrive(0.5));
        driver.rightTrigger.whileHeld(new SetIntake(1));

       
        /* Operator Testing
        operator.rightTrigger.whileHeld(() -> Robot.serializer.driveTurnTable(SerializerSpeed.fast), Robot.serializer);

        operator.rightBumper.whileHeld(() -> Robot.throat.ejectorSpeed(true), Robot.throat);

        operator.bButton.whileHeld(() -> Robot.flywheel.setFlywheelTargetDashboard(), Robot.flywheel);
        */

        // Operator
        operator.aButton.whileHeld(new SetIntake(1));
        operator.bButton.whileHeld(new SetIntake(-1));
        operator.xButton.whileHeld(() -> Robot.unjammer.spin(true), Robot.unjammer);
        operator.dPadUp.whileHeld(new SetClimbTakePosition(RobotConstants2020.CLIMB_POSITION, true));
        operator.dPadDown.whileHeld(new SetClimbTakePosition(RobotConstants2020.INTAKE_POSITION, false));
        operator.dPadLeft.whileHeld(new SetClimbTakePosition(RobotConstants2020.CLIMB_POSITION, false));
        operator.dPadRight.whileHeld(new SetClimbTakePosition(RobotConstants2020.CLIMB_POSITION, false));

        


        // Default Commands
        Robot.flywheel.setDefaultCommand(new FlywheelZero());
        Robot.serializer.setDefaultCommand(new SerializerStop()); // TODO: change to default
        Robot.unjammer.setDefaultCommand(new RunCommand(() -> Robot.unjammer.spin(false), Robot.unjammer));
        Robot.turret.setDefaultCommand(new ManualTurret());
    }


    public double getTurretPanTarget() {
        return operator.getLeftX();
    }

    public double getTurretTiltTarget() {
        return operator.getLeftY();
    }

    public double getLeftSpeed() {
        return driver.getLeftY();
    }

    public double getRightSpeed() {
        return driver.getRightY();
    }
}
