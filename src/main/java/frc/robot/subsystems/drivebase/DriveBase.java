// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems.drivebase;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.revrobotics.CANSparkMax;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.geometry.Pose2d;
import edu.wpi.first.wpilibj.geometry.Rotation2d;
import edu.wpi.first.wpilibj.geometry.Translation2d;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveWheelSpeeds;
import edu.wpi.first.wpilibj.smartdashboard.*;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Victor;
import frc.robot.commands.drive.*;
import frc.robot.Robot;
import frc.robot.RobotConstants2019;
import frc.robot.RobotConstants2020;
import frc.robot.RobotConstantsRaft;
import frc.robot.Robot.RobotType;

/**
 *
 */
public abstract class DriveBase extends SubsystemBase {


    protected SpeedControllerGroup leftDrive;
    protected SpeedControllerGroup rightDrive;
    public DifferentialDrive differentialDrive1;
    public DifferentialDriveOdometry odometer;
    protected PIDController PIDRight; // TODO: should these be protected? (originally private)
    protected PIDController PIDLeft;
    protected double setpointLeft, setpointRight;

    public DriveBase() {
        setup();

    }

    public void setup() {
        leftDrive = getLeftDrive();
        rightDrive = getRightDrive();
        
        addChild("LeftDrive", leftDrive);
        addChild("RightDrive", rightDrive);
        differentialDrive1 = new DifferentialDrive(leftDrive, rightDrive);
        addChild("Differential Drive 1", differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);
        double navxAngle = Robot.navx.getNavYaw();
        odometer = new DifferentialDriveOdometry(Rotation2d.fromDegrees(navxAngle));
    }
    
    public abstract SpeedControllerGroup getLeftDrive();

    public abstract SpeedControllerGroup getRightDrive();

    private double encoderInches(WPI_TalonSRX driveInput) {
        if (driveInput == null) {
            return 0;
        }
        double wheelDiameter = 4.0;
        double gearRatio = (double) 1 / 1; // ratio of the axel the wheel lies on to the axel the encoder reads
        int ticksPerRev = 4096; // amount of ticks in one revolution of the encoder axel
        double counts = driveInput.getSensorCollection().getQuadraturePosition();
        double ratio = (gearRatio * wheelDiameter * Math.PI) / ticksPerRev;
        return counts * ratio;
    }

    public abstract double encoderInches(CANSparkMax driveInput);

    public double speedToVolts(double speed){
        double volts = 12;
        double speedFactor = 1;
        return speed * volts * speedFactor;
    }

    public void tankDriveVolts(double leftSpeed, double rightSpeed){
        double leftVolts = speedToVolts(leftSpeed);
        double rightVolts = speedToVolts(rightSpeed);
        leftDrive.setVoltage(leftVolts);
        rightDrive.setVoltage(-rightVolts);
        differentialDrive1.feed();
    }

    public double angleToDist(double angle) {
        double inchPerRev = 92.45; // constant equal to the total distance the wheels move for one full revolution
        return (inchPerRev * angle) / 360;
    }


    public void reportPosition() {

    }

    public abstract double getRightPosition();

    public abstract double getLeftPosition();

    public void PIDDrive() {
        double maxSpeed = 0.7;
        double minSpeed = 0.3;
        double right = PIDRight.calculate(getRightPosition());
        double left = PIDLeft.calculate(getLeftPosition());
        double leftSign = left / Math.abs(left);
        double rightSign = right / Math.abs(right);

        right = Math.min(maxSpeed, Math.max(minSpeed, Math.abs(right))) * rightSign;
        left = Math.min(maxSpeed, Math.max(minSpeed, Math.abs(left))) * leftSign;

        right = isAtRightTarget() ? 0 : right;
        left = isAtLeftTarget() ? 0 : left;

        differentialDrive1.tankDrive(left, right);

    }

    
    public PIDController getPIDLeft(){
        return PIDLeft;
    }

    public PIDController getPIDRight(){
        return PIDRight;
    }

    public void setTarget(double left, double right) {
        setpointLeft = left;
        setpointRight = right;
        PIDLeft.setSetpoint(left);
        PIDRight.setSetpoint(right);
    }

    public void setTargetAngle(double targetAngle) {
        double delta = angleToDist(targetAngle);
        double targetLeft = getLeftPosition() + delta;
        double targetRight = getRightPosition() - delta;
        Robot.driveBase.setTarget(targetLeft, targetRight);
        System.out.println("setTargetAngle initialized, target left = " + targetLeft + " target right = " + targetRight);
    }

    public boolean isAtTarget() {
        return isAtLeftTarget() && isAtRightTarget();
    }

    public boolean isAtRightTarget() {
        double error = 2;
        return (setpointRight < Robot.driveBase.getRightPosition() + error) && (setpointRight > Robot.driveBase.getRightPosition() - error);
    }

    public boolean isAtLeftTarget() {
        double error = 2;
        return (setpointLeft < Robot.driveBase.getLeftPosition() + error) && (setpointLeft > Robot.driveBase.getLeftPosition() - error);
    }

    public abstract void resetOdometry();

    public Pose2d getPose() {
        return odometer.getPoseMeters();
    }

    public abstract DifferentialDriveWheelSpeeds getWheelSpeeds();

    @Override
    public void periodic() {
        //SmartDashboard.putNumber("Right Encoder", right4.getSensorCollection().getQuadraturePosition());
        //SmartDashboard.putNumber("Left Encoder", -left4.getSensorCollection().getQuadraturePosition());
        // Put code here to be run every loop
        double rightInches = getRightPosition();
        double leftInches = getLeftPosition();
        double navxAngle = Robot.navx.getNavYaw();
        // converts raw encoder readout to inches
        odometer.update(Rotation2d.fromDegrees(navxAngle), leftInches, rightInches);
        SmartDashboard.putNumber("Right Position", rightInches);
        SmartDashboard.putNumber("Left Position", leftInches);

        Translation2d translation = odometer.getPoseMeters().getTranslation();

        SmartDashboard.putNumber("Odometer x", translation.getX());
        SmartDashboard.putNumber("Odometer y", translation.getY());
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
