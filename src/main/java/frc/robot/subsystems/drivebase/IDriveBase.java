// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems.drivebase;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.revrobotics.CANSparkMax;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.geometry.Pose2d;
import edu.wpi.first.wpilibj.geometry.Rotation2d;
import edu.wpi.first.wpilibj.geometry.Translation2d;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveWheelSpeeds;
import edu.wpi.first.wpilibj.smartdashboard.*;
import edu.wpi.first.wpilibj2.command.Subsystem;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Victor;
import frc.robot.commands.drive.*;
import frc.robot.Robot;
import frc.robot.RobotConstants2019;
import frc.robot.RobotConstants2020;
import frc.robot.RobotConstantsRaft;
import frc.robot.Robot.RobotType;

/**
 *
 */
public interface IDriveBase extends Subsystem {

    public void tankDrive(double left, double right);

    public SpeedControllerGroup getLeftDrive();

    public SpeedControllerGroup getRightDrive();

    public double encoderInches(CANSparkMax driveInput);

    public double speedToVolts(double speed);

    public void tankDriveVolts(double leftSpeed, double rightSpeed);

    public double angleToDist(double angle);

    public void reportPosition();

    public double getRightPosition();

    public double getLeftPosition();

    public void PIDDrive();

    public void resetPosition();

    public PIDController getPIDLeft();

    public PIDController getPIDRight();

    public void setTarget(double left, double right);

    public void setTargetAngle(double targetAngle);

    public boolean isAtTarget();

    public boolean isAtRightTarget();

    public boolean isAtLeftTarget();

    public void resetOdometry();

    public Pose2d getPose();

    public DifferentialDriveWheelSpeeds getWheelSpeeds();

    public void periodic();

    

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
