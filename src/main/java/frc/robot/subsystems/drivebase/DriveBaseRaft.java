// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems.drivebase;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.revrobotics.CANSparkMax;

import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.geometry.Pose2d;
import edu.wpi.first.wpilibj.geometry.Rotation2d;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveWheelSpeeds;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;
import frc.robot.RobotConstantsRaft;
import frc.robot.util.LogUtils;

/**
 *
 */
public class DriveBaseRaft extends DriveBase {

    private Victor left1;
    private Victor left2;
    private Victor left3;
    private WPI_TalonSRX left4 = null;
    private Victor right1;
    private Victor right2;
    private Victor right3;
    private WPI_TalonSRX right4 = null;

    private final double pidDoneAllowedPositionError = 1;
    private final double pidDoneAllowedVelocityError = 1;

    public DriveBaseRaft() { 
        setup();
    }

    protected void setup() {
        
        PIDRight = new PIDController(0.1, 0.00, 0.00);
        PIDLeft = new PIDController(0.1, 0.00, 0.00);

        left1 = new Victor(RobotConstantsRaft.DRIVE_LEFT_VICTOR_A);
        addChild("Left1", left1);
        left1.setInverted(false);

        left2 = new Victor(RobotConstantsRaft.DRIVE_LEFT_VICTOR_B);
        addChild("Left2", left2);
        left2.setInverted(false);

        left3 = new Victor(RobotConstantsRaft.DRIVE_LEFT_VICTOR_C);
        addChild("Left3", left3);
        left3.setInverted(false);

        left4 = new WPI_TalonSRX(RobotConstantsRaft.DRIVE_LEFT_TALONSRX);
        addChild("Left4", left4);
        left4.setInverted(false);

        right1 = new Victor(RobotConstantsRaft.DRIVE_RIGHT_VICTOR_A);
        addChild("Right1", right1);
        right1.setInverted(false);

        right2 = new Victor(RobotConstantsRaft.DRIVE_RIGHT_VICTOR_B);
        addChild("Right2", right2);
        right2.setInverted(false);

        right3 = new Victor(RobotConstantsRaft.DRIVE_RIGHT_VICTOR_C);
        addChild("Right3", right3);
        right3.setInverted(false);

        right4 = new WPI_TalonSRX(RobotConstantsRaft.DRIVE_RIGHT_TALONSRX);
        addChild("Right4", right4);
        right4.setInverted(false);

        leftDrive = new SpeedControllerGroup(left1, left2, left3, left4);
        rightDrive = new SpeedControllerGroup(right1, right2, right3, right4);

        super.setup();
    }

    protected double encoderInches(WPI_TalonSRX driveInput) {
        if (driveInput == null) {
            return 0;
        }
        double wheelDiameter = 4.0;
        double gearRatio = (double) 1 / 1; // ratio of the axel the wheel lies on to the axel the encoder reads
        int ticksPerRev = 4096; // amount of ticks in one revolution of the encoder axel
        double counts = driveInput.getSensorCollection().getQuadraturePosition();
        double ratio = (gearRatio * wheelDiameter * Math.PI) / ticksPerRev;
        return counts * ratio;
    }

    public double encoderInches(CANSparkMax driveInput) {
        if (driveInput == null) {
            return 0;
        }
        double wheelDiameter = 4.0;
        double gearRatio = (double) 1 / 1; // ratio of the axel the wheel lies on to the axel the encoder reads

        int ticksPerRev = 42; // amount of ticks in one revolution of the encoder axel
        double counts = driveInput.getEncoder().getPosition();
        double ratio = (gearRatio * wheelDiameter * Math.PI) / ticksPerRev;
        return counts * ratio;
    }

    public double speedToVolts(double speed){
        double volts = 12;
        double speedFactor = 1;
        return speed * volts * speedFactor;
    }

    public void tankDriveVolts(double leftSpeed, double rightSpeed){
        double leftVolts = speedToVolts(leftSpeed);
        double rightVolts = speedToVolts(rightSpeed);
        leftDrive.setVoltage(leftVolts);
        rightDrive.setVoltage(-rightVolts);
        differentialDrive1.feed();
    }

    public double angleToDist(double angle) {
        double inchPerRev = 92.45; // constant equal to the total distance the wheels move for one full revolution
        return (inchPerRev * angle) / 360;
    }


    public void reportPosition() {

    }

    public double getRightPosition() {
        return encoderInches(right4);
    }

    public double getLeftPosition() {
        return -encoderInches(left4);
    }

    public void PIDDrive() {
        double maxSpeed = 0.7;
        double minSpeed = 0.3;
        double right = PIDRight.calculate(getRightPosition());
        double left = PIDLeft.calculate(getLeftPosition());
        SmartDashboard.putNumber("DB/pidRout", right);
        SmartDashboard.putNumber("DB/pidLout", left);

        double leftSign = left / Math.abs(left);
        double rightSign = right / Math.abs(right);

        right = Math.min(maxSpeed, Math.max(minSpeed, Math.abs(right))) * rightSign;
        left = Math.min(maxSpeed, Math.max(minSpeed, Math.abs(left))) * leftSign;

        right = isAtRightTarget() ? 0 : right;
        left = isAtLeftTarget() ? 0 : left;

        differentialDrive1.tankDrive(left, right);

    }

    public void periodic() {
        super.periodic();
        SmartDashboard.putNumber("DB/right", getRightPosition());
        SmartDashboard.putNumber("DB/left", getLeftPosition());
        SmartDashboard.putNumber("DB/pidLerror", PIDLeft.getPositionError());
        SmartDashboard.putNumber("DB/pidRerror", PIDRight.getPositionError());
        SmartDashboard.putNumber("DB/lVelocity", left4.getSensorCollection().getQuadratureVelocity());
        SmartDashboard.putNumber("DB/Rvelocity", right4.getSensorCollection().getQuadratureVelocity());
    }

    
    public PIDController getPIDLeft(){
        return PIDLeft;
    }

    public PIDController getPIDRight(){
        return PIDRight;
    }

    public void setTarget(double left, double right) {
        setpointLeft = left;
        setpointRight = right;
        PIDLeft.setSetpoint(left);
        PIDRight.setSetpoint(right);
    }

    public void setTargetAngle(double targetAngle) {
        double delta = angleToDist(targetAngle);
        double targetLeft = getLeftPosition() + delta;
        double targetRight = getRightPosition() - delta;
        Robot.driveBase.setTarget(targetLeft, targetRight);
        LogUtils.log("setTargetAngle initialized, target left = " + targetLeft + " target right = " + targetRight);
    }

    public boolean isAtTarget() {
        return isAtLeftTarget() && isAtRightTarget();
    }

    public boolean isAtRightTarget() {
        final boolean AtPosition = PIDRight.getPositionError() < pidDoneAllowedPositionError;
        final boolean AtVelocity = right4.getSensorCollection().getQuadratureVelocity() < pidDoneAllowedVelocityError;
        return AtPosition && AtVelocity;
    }

    public boolean isAtLeftTarget() {
        final boolean AtPosition = PIDLeft.getPositionError() < pidDoneAllowedPositionError;
        final boolean AtVelocity = left4.getSensorCollection().getQuadratureVelocity() < pidDoneAllowedVelocityError;
        return AtPosition && AtVelocity;
    }

    public void resetOdometry(){
        left4.getSensorCollection().setQuadraturePosition(0, 0);
        right4.getSensorCollection().setQuadraturePosition(0, 0);

        double navxAngle = Robot.navx.getNavYaw();
        Rotation2d rotation = Rotation2d.fromDegrees(navxAngle);
        odometer.resetPosition(new Pose2d(0, 0, rotation), rotation);
    }

    public Pose2d getPose() {
        return odometer.getPoseMeters();
    }

    public DifferentialDriveWheelSpeeds getWheelSpeeds() {
        return new DifferentialDriveWheelSpeeds(left4.getSensorCollection().getQuadratureVelocity(),
                right4.getSensorCollection().getQuadratureVelocity());
    }

    @Override
    public SpeedControllerGroup getLeftDrive() {
        return new SpeedControllerGroup(left1, left2, left3, left4);
    }

    @Override
    public SpeedControllerGroup getRightDrive() {
        return new SpeedControllerGroup(right1, right2, right3, right4);
    }

    @Override
    public void resetPosition() {
        // TODO Auto-generated method stub

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
